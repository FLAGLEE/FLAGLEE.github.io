[{"title":"使用QT编译RTKLIB-GUI程序","date":"2020-08-10T09:26:54.000Z","path":"2020/08/10/使用QT编译RTKLIB-GUI程序/","text":"近期在基于 RTKLIB 改了一些代码，但一直是基于源码运行的，于是便想着编译一个自己的图形用户界面。查阅 manual 2.4.2 手册上使用的是 Embarcadero C++ Builder XE2 or XE3，上网查了一下实在是太古老，无奈放弃。之后使用 QT 编译成功，写下这篇博客记录一下方法和注意事项。 所用版本这篇博客基于的是 demo5 源码版本，链接见http://rtkexplorer.com/downloads/rtklib-code/。QT 使用的是 5.14.2，国内镜像链接见https://mirrors.tuna.tsinghua.edu.cn/qt/archive/qt/5.14/5.14.2/。本文只针对以上版本记录编译过程中遇到的问题。其实版本之间大同小异，博主之前也用别的版本编译成功过，希望大家举一反三。 编译流程首先使用 QT creator 打开源码根目录下的.pro 文件，创建工程。 这里使用的是 MinGW 32 位，注意区分。 以 rtkpost 软件为例，选择 Release 构建下的 rtkpost_qt。 按绿色三角或 Ctrl+R 开始运行。 问题 1第一个问题发现提示 :-1: error: No rule to make target ‘rcv/ss2.c’, needed by ‘release/ss2.o’. Stop. 这个问题是由于之前的代码中有这个文件，而最新的版本已经去掉，我们可以在 src.pro 中找到这一条将其注释掉。 重新运行程序。 问题 2发现提示 :-1: error: No rule to make target ‘../../src/debug/libRTKLib.a’, needed by ‘release/rtknavi_qt.exe’. Stop. 这是因为缺少库文件 libRTKLib.a，这个文件就是我们源代码生成的库文件，当你改了源码之后，这个也会随之改变，所以千万不要乱用。这个文件可以在 Debug 模式下生成，我们切到 Debug 模式下重新运行。 问题 3发现一连串报错 D:\\Document\\RTK\\RTKLIB-demo5_for_QT\\RTKLIB-demo5..\\RTKLIB-demo5\\app\\rtkconv_qt\\codeopt.cpp:333: error: ‘FREQTYPE_L7’ was not declared in this scope E27-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_L7)); 这是由于 demo5 版本在头文件改了一些配置，源码编译文件改了，但是 qt 编译文件还没有改，我们可以找到 app&gt;rtkconv&gt;codeopt.cpp 查看它是怎么使用的，我们 rtkconv_qt&gt;codeopt.cpp 只要随之改变就好 E27-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_L7)); E28-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_L7)); E29-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_L7)); E30-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_L6)); E31-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_L6)); E32-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_L6)); E33-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_L6)); E34-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_L6)); E37-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_L8)); E38-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_L8)); E39-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_L8)); 改为 E27-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_L2)); E28-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_L2)); E29-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_L2)); E30-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_E6)); E31-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_E6)); E32-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_E6)); E33-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_E6)); E34-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_E6)); E37-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_E5ab)); E38-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_E5ab)); E39-&gt;setEnabled((NavSys&amp;SYS_GAL)&amp;&amp;(FreqType&amp;FREQTYPE_E5ab)); J35-&gt;setEnabled((NavSys&amp;SYS_QZS)&amp;&amp;(FreqType&amp;FREQTYPE_L6)); J36-&gt;setEnabled((NavSys&amp;SYS_QZS)&amp;&amp;(FreqType&amp;FREQTYPE_L6)); J33-&gt;setEnabled((NavSys&amp;SYS_QZS)&amp;&amp;(FreqType&amp;FREQTYPE_L6)); 改为 J35-&gt;setEnabled((NavSys&amp;SYS_QZS)&amp;&amp;(FreqType&amp;FREQTYPE_E6)); J36-&gt;setEnabled((NavSys&amp;SYS_QZS)&amp;&amp;(FreqType&amp;FREQTYPE_E6)); J33-&gt;setEnabled((NavSys&amp;SYS_QZS)&amp;&amp;(FreqType&amp;FREQTYPE_E6)); C27-&gt;setEnabled((NavSys&amp;SYS_CMP)&amp;&amp;(FreqType&amp;FREQTYPE_L7)); C28-&gt;setEnabled((NavSys&amp;SYS_CMP)&amp;&amp;(FreqType&amp;FREQTYPE_L7)); C29-&gt;setEnabled((NavSys&amp;SYS_CMP)&amp;&amp;(FreqType&amp;FREQTYPE_L7)); C42-&gt;setEnabled((NavSys&amp;SYS_CMP)&amp;&amp;(FreqType&amp;FREQTYPE_L6)); C43-&gt;setEnabled((NavSys&amp;SYS_CMP)&amp;&amp;(FreqType&amp;FREQTYPE_L6)); C33-&gt;setEnabled((NavSys&amp;SYS_CMP)&amp;&amp;(FreqType&amp;FREQTYPE_L6)); 改为 C27-&gt;setEnabled((NavSys&amp;SYS_CMP)&amp;&amp;(FreqType&amp;FREQTYPE_L2)); C28-&gt;setEnabled((NavSys&amp;SYS_CMP)&amp;&amp;(FreqType&amp;FREQTYPE_L2)); C29-&gt;setEnabled((NavSys&amp;SYS_CMP)&amp;&amp;(FreqType&amp;FREQTYPE_L2)); C42-&gt;setEnabled((NavSys&amp;SYS_CMP)&amp;&amp;(FreqType&amp;FREQTYPE_E6)); C43-&gt;setEnabled((NavSys&amp;SYS_CMP)&amp;&amp;(FreqType&amp;FREQTYPE_E6)); C33-&gt;setEnabled((NavSys&amp;SYS_CMP)&amp;&amp;(FreqType&amp;FREQTYPE_E6)); I52-&gt;setEnabled((NavSys&amp;SYS_CMP)&amp;&amp;(FreqType&amp;FREQTYPE_L9)); I53-&gt;setEnabled((NavSys&amp;SYS_CMP)&amp;&amp;(FreqType&amp;FREQTYPE_L9)); I54-&gt;setEnabled((NavSys&amp;SYS_CMP)&amp;&amp;(FreqType&amp;FREQTYPE_L9)); I55-&gt;setEnabled((NavSys&amp;SYS_CMP)&amp;&amp;(FreqType&amp;FREQTYPE_L9)); 改为 I52-&gt;setEnabled((NavSys&amp;SYS_CMP)&amp;&amp;(FreqType&amp;FREQTYPE_S)); I53-&gt;setEnabled((NavSys&amp;SYS_CMP)&amp;&amp;(FreqType&amp;FREQTYPE_S)); I54-&gt;setEnabled((NavSys&amp;SYS_CMP)&amp;&amp;(FreqType&amp;FREQTYPE_S)); I55-&gt;setEnabled((NavSys&amp;SYS_CMP)&amp;&amp;(FreqType&amp;FREQTYPE_S)); 同样 convopt.cpp 下也有这个问题，也采用上面的方法改完，重新运行。编译成功，我们已经可以看到 Debug 模式下的程序界面。 之后我们在 D:\\Document\\RTK\\RTKLIB-demo5_for_QT\\build-RTKLib-Desktop_Qt_5_14_2_MinGW_32_bit-Debug\\src\\debug 路径下找到我们编译的 libRTKLib.a 将其复制到 D:\\Document\\RTK\\RTKLIB-demo5_for_QT\\build-RTKLib-Desktop_Qt_5_14_2_MinGW_32_bit-Release\\src\\debug 且回到 Release 模式，重新运行，即可成功。 程序打包这样直接生成的程序是不能直接运行的，需要进行打包。打开 Qt 版本号 for Desktop (MinGW 版本号 32bit)命令行，注意与一开始选择的对应。 接着输入命令行，cd /d 路径(指的是需要打包的 exe 程序目录，就是刚才拷贝出来的 exe 程序所在的目录)，回车后， 输入如下命令行：windeployqt 程序名 敲击回车。这一步操作是将所需的库文件全都拷贝到 exe 程序的当前文件。 现在，便可以双击 exe 直接运行软件了！ 若你要将程序给别人使用，一定要注意 dll 文件也要一起打包哦。","tags":[{"name":"GNSS","slug":"GNSS","permalink":"https://flaglee.cn/tags/GNSS/"},{"name":"RTKlib","slug":"RTKlib","permalink":"https://flaglee.cn/tags/RTKlib/"},{"name":"RTK","slug":"RTK","permalink":"https://flaglee.cn/tags/RTK/"},{"name":"QT","slug":"QT","permalink":"https://flaglee.cn/tags/QT/"}]},{"title":"RTKlib源码解析-高精度GNSS定位处理过程","date":"2020-07-15T14:17:30.000Z","path":"2020/07/15/RTKlib-关于高精度GPS动态定位处理过程/","text":"RTKLIB 是用于 GNSS（全球导航卫星系统）的标准和精确定位的开源程序包。二进制文件以及完整原始代码见RTKlib.com。Demo5 是 RTKLIB 代码的修改版本，针对低成本的单频和双频接收器而定制，旨在提高性能。二进制文件以及完整原始代码见http://rtkexplorer.com/downloads/rtklib-code/。 本文主要介绍用 RTKLIB 实现精密动态定位的过程，该过程包括观测文件和导航文件的读取、基准站位置的计算、流动站位置的求解、运行结果的输出。 主函数配置解算流程文件读取求解基站参数相对动态定位","tags":[{"name":"GNSS","slug":"GNSS","permalink":"https://flaglee.cn/tags/GNSS/"},{"name":"GPS","slug":"GPS","permalink":"https://flaglee.cn/tags/GPS/"},{"name":"BDS","slug":"BDS","permalink":"https://flaglee.cn/tags/BDS/"},{"name":"RTKlib","slug":"RTKlib","permalink":"https://flaglee.cn/tags/RTKlib/"},{"name":"RTK","slug":"RTK","permalink":"https://flaglee.cn/tags/RTK/"}]},{"title":"Markdown语法汇总","date":"2020-05-26T02:58:53.000Z","path":"2020/05/26/Markdown语法汇总/","text":"Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息，例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge 等。 Markdown 标题标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加#+space号即可。使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。 # 这是一级标题 ## 这是二级标题 ### 这是三级标题 #### 这是四级标题 ##### 这是五级标题 ###### 这是六级标题 Markdown 段落段落Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。 字体Markdown 可以使用以下几种字体： _斜体文本_ _斜体文本_ **粗体文本** **粗体文本** **_粗斜体文本_** **_粗斜体文本_** 斜体文本斜体文本粗体文本粗体文本粗斜体文本粗斜体文本 分割线可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： --- --- --- --- --- 删除线如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ 即可，实例如下： GOOGLE.COM ~~BAIDU.COM~~ GOOGLE.COMBAIDU.COM 下划线下划线可以通过 HTML 标签来实现： &lt;u&gt;带下划线文本&lt;/u&gt; 带下划线文本 Markdown 列表Markdown 支持有序列表和无序列表。 无序列表无序列表使用星号*、加号+或是减号-作为列表标记，这些标记后面要添加一个space，然后再填写内容： - 第一项 - 第二项 - 第三项 * 第一项 * 第二项 * 第三项 - 第一项 - 第二项 - 第三项 第一项 第二项 第三项 有序列表有序列表使用数字并加上space. 号来表示，如： 1. 第一项 2. 第二项 3. 第三项 第一项 第二项 第三项 Markdown 区块Markdown 区块引用是在段落开头使用 >符号 ，然后后面紧跟一个space符号： &gt; 区块引用 区块引用 Markdown 代码如果是段落上的一个函数或片段的代码可以用反引号把它包起来`，例如： `printf()` 函数 printf() 函数代码区块使用 4 个空格或者一个制表符Tab。也可以用 ``` 包裹一段代码，并指定一种语言（也可以不指定） Markdown 链接链接使用方法如下： [链接名称](链接地址) 或者 &lt;链接地址&gt; [FLAG&#39;s blog](www.flaglee.cn) FLAG’s blog 高级链接可以通过变量来设置一个链接，变量赋值在文档末尾进行： 这个链接用 1 作为网址变量 [Google][1] 然后在文档的结尾为变量赋值（网址） [1]: http://www.google.com/ Markdown 图片Markdown 图片语法格式如下： ![alt 属性文本](图片地址) ![alt 属性文本](图片地址 &quot;可选标题&quot;) ![Markdown](https://www.runoob.com/wp-content/uploads/2019/03/iconfinder_markdown_298823.png &quot;markdown图标&quot;) Markdown 表格Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。 语法格式如下： | 表头 | 表头 | | ------ | ------ | | 单元格 | 单元格 | | 单元格 | 单元格 | 表头 表头 单元格 单元格 单元格 单元格 对齐方式 可以设置表格的对齐方式： -: 设置内容和标题栏居右对齐。:- 设置内容和标题栏居左对齐。:-: 设置内容和标题栏居中对齐。 | 左对齐 | 右对齐 | 居中对齐 | | :----- | -----: | :------: | | 单元格 | 单元格 | 单元格 | | 单元格 | 单元格 | 单元格 | 左对齐 右对齐 居中对齐 单元格 单元格 单元格 单元格 单元格 单元格 Markdown 高级技巧支持的 HTML 元素不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。 目前支持的 HTML 元素有：&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;等，如： 使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑 使用 Ctrl+Alt+Del 重启电脑 转义Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符： **文本加粗** \\*\\* 正常显示星号 \\*\\* 文本加粗** 正常显示星号 ** 公式当需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 Mathjax 对数学公式进行渲染。","tags":[{"name":"blog","slug":"blog","permalink":"https://flaglee.cn/tags/blog/"},{"name":"Markdown","slug":"Markdown","permalink":"https://flaglee.cn/tags/Markdown/"}]},{"title":"Hello World","date":"2020-05-26T02:53:03.254Z","path":"2020/05/26/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://flaglee.cn/tags/Hexo/"},{"name":"blog","slug":"blog","permalink":"https://flaglee.cn/tags/blog/"}]}]